
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, j as globals, k as validate_store, l as component_subscribe, v as validate_slots, r as ready, e as element, m as text, b as add_location, f as insert_dev, o as append_dev, p as set_data_dev, n as noop, h as detach_dev } from './main-8ded3f9f.js';

/* src/pages/blog/[post].svelte generated by Svelte v3.29.0 */

const { console: console_1 } = globals;
const file = "src/pages/blog/[post].svelte";

function create_fragment(ctx) {
	let h2;
	let t0;
	let t1;

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("hello ");
			t1 = text(/*post*/ ctx[0]);
			add_location(h2, file, 12, 0, 150);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			append_dev(h2, t1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*post*/ 1) set_data_dev(t1, /*post*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $ready;
	validate_store(ready, "ready");
	component_subscribe($$self, ready, $$value => $$invalidate(1, $ready = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bpostu5D", slots, []);
	let { post } = $$props;

	setTimeout(
		() => {
			$ready();
		},
		5000
	);

	console.log(post);
	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bpostu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({ ready, post, $ready });

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [post];
}

class U5Bpostu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bpostu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console_1.warn("<U5Bpostu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bpostu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bpostu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bpostu5D;
//# sourceMappingURL=[post]-cecb37b5.js.map
